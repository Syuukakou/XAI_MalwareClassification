#%%

import csv
import numpy as np
import shap
import pandas as pd
# 将路径全部转换为小写后，去除重复路径
str_dict = {}
i = 0
# with open(r"E:\Program Files scholar\20UDC01-OneDrive\OneDrive - 東京電機大学\情報処理学会論文誌2-24\MalwareAnalysisThesis-Github-I-O-files\total_filepath_V1.csv") as csvfile:
# 	csv_reader = csv.reader(csvfile)
# 	for row in csv_reader:
# 		print(row)
# 		temp = row[0].lower()
# 		str_dict[i] = temp
# 		i = i + 1
# print(str_dict)
# file_list = []
# for key in str_dict:
# 	file_list.append(str_dict[key])
# print(len(file_list))
# file_set = set(file_list)
# print(file_set)
##############################################################################

'''
提取标签
'''
feature_lsit = []
with open(r"E:\Program Files scholar\20UDC01-OneDrive\OneDrive - 東京電機大学\研究\APIグループ間の相関係数とフォルダの操作頻度に基づくマルウェア分類手法の提案v4.0r\MalwareAnalysisThesis-Github-I-O-files\first_line.csv") as csvfile:
	csv_reader = csv.reader(csvfile)
	for row in csv_reader:
		# print(len(row))
		feature_lsit = row
print(len(feature_lsit))
print(feature_lsit)

'''
test SHAP
'''
from imblearn.over_sampling import SMOTE, RandomOverSampler
from sklearn.ensemble import RandomForestClassifier,RandomForestRegressor
from sklearn.metrics import classification_report
from sklearn.model_selection import train_test_split
import time
from sklearn.feature_selection import SelectFromModel

start_time = time.time()
# final_fp_api.csv 是用来分类的
all_data = pd.read_csv(
    r"E:\Program Files scholar\20UDC01-OneDrive\OneDrive - 東京電機大学\研究\APIグループ間の相関係数とフォルダの操作頻度に基づくマルウェア分類手法の提案v4.0r\MalwareAnalysisThesis-Github-I-O-files\final_fp_api_first_line-SHAP.csv")

print(
    "------------------------- convert csv into matrix ----------------------")
feature_matrix = all_data.values
# 将样本标签提取至 label_matrix中
label_matrix = feature_matrix[:, 9520]
# 提取完标签后，删除标签列
data_matrix = np.delete(feature_matrix, 9520, axis=1)
# estimator=RandomForestClassifier(n_estimators=265)
# ################################ Feature Selection ##########################
print("------------------------- Feature Selection ----------------------")
selector = SelectFromModel(RandomForestClassifier(n_estimators=265))
selected_feature = selector.fit_transform(data_matrix, label_matrix)
print("Selected Feature matrix shape: ", selected_feature.shape)

# sm = RandomOverSampler(random_state=0)
# data_resampled, label_resampled = sm.fit_resample(selected_feature,
#                                                   label_matrix)
# data_train_res, label_train_res = sm.fit_sample(data_train,label_train)
print("Fit resampled OK")
clf = RandomForestClassifier(n_estimators=268, verbose=268)
# ################################# Fit and Predict ##########################
data_train, data_test, label_train, label_test = train_test_split(
    selected_feature, label_matrix,
    test_size=0.3,
    random_state=0)
clf.fit(data_train, label_train)

label_predict = clf.predict(data_test)
label_probas = clf.predict_proba(data_test)
# print(classification_report(label_test, clf.predict(data_test)))
report = classification_report(label_test, label_predict)
print(report)

# background = shap.sample(data_train,100)
# background = background.astype("float64")
data_test = data_test.astype("float64")
explainer = shap.TreeExplainer(clf, feature_perturbation="independent")
shap_values = explainer.shap_values(data_test)
shap.summary_plot(shap_values, data_test,feature_names=feature_lsit)



