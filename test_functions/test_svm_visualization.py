import pandas as pd
import numpy as np
from sklearn.metrics import classification_report
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn import preprocessing
from mlxtend.plotting import plot_decision_regions
import matplotlib.gridspec as gridspec
import matplotlib.pyplot as plt


np.set_printoptions(suppress = True)
all_data = pd.read_csv(r"E:\PycharmWorkSpace\RansomwareAnalysis\All_Data.csv",header=None)
#将csv转为矩阵
allData_matrix = all_data.values

allData_matrix = allData_matrix[:,:3]
#生成标签矩阵
allDataLabel_matrix = allData_matrix[:,2]
#从原始矩阵中剔除标签，保留数据
allData_matrix = np.delete(allData_matrix,2,axis=1)
#-----------------------------------------------------------------------------------------------------------------
#SVM
# 将数据随机分为 训练数据：测试数据 = 7 ：3
data_train, data_test, label_train, label_test = train_test_split(allData_matrix,allDataLabel_matrix,test_size=0.3, random_state=0)
# classifier = svm.SVC(kernel="linear",C=100, class_weight="balanced",probability=True)
# classifier.fit(data_train,label_train)
# result_true, result_pred = label_test, classifier.predict(data_test)
#
# classes = ["Benign","Cerber","CryptoWall","CryptoLocker","Genasom","Jigsaw","Locky","Petya","Reveton","TeslaCrypt"]
#
# print("-->Dataset: ")
# print("Cerber:\t\t247",end="\t")
# print("CryptoLocker:\t20")
# print("CrytoWall:\t47",end="\t")
# print("Genasom:\t\t25")
# print("Jigsaw:\t\t29",end="\t")
# print("Locky:\t\t\t334")
# print("Petya:\t\t6",end="\t")
# print("Reveton:\t\t126")
# print("TeslaCrypt:\t65",end="\t")
# print("Benign:\t\t\t241")
# print()
# print("-->Classification Result:")
# print(classification_report(result_true,result_pred))
# print("-->F1 value: ",classifier.score(data_test,label_test))

# -------------特征变换-------------------
label_list = []
for i in label_train:
    label_list.append(i)
label_list = list(set(label_list))
label_dict = {}
n = 0
for i in label_list:
    label_dict[i] = n
    n = n +1
end_list = []
for i in label_train:
    if i in label_dict:
        end_list.append(label_dict[i])
# ------------------------------------------
'''
2-D plot with 2 features
'''
def make_meshgrid(x, y, h=.02):
    x_min, x_max = x.min() - 1, x.max() + 1
    y_min, y_max = y.min() - 1, y.max() + 1
    xx, yy = np.meshgrid(np.arange(x_min, x_max, h), np.arange(y_min, y_max, h))
    return xx, yy
def plot_contours(ax, clf, xx, yy, **params):
    Z = clf.predict(np.c_[xx.ravel(), yy.ravel()])
    Z = Z.reshape(xx.shape)
    out = ax.contourf(xx, yy, Z, **params)
    return out
model = svm.SVC(kernel="linear",C=100, class_weight="balanced",probability=True)
clf = model.fit(data_train, end_list)
fig, ax = plt.subplots()
# title for the plots
title = ('Decision surface of linear SVC ')
# Set-up grid for plotting.
X0, X1 = data_train[:, 0], data_train[:, 1]
xx, yy = make_meshgrid(X0, X1)
plot_contours(ax, clf, xx, yy, cmap=plt.cm.coolwarm, alpha=0.8)
ax.scatter(X0, X1, c=end_list, cmap=plt.cm.coolwarm, s=20, edgecolors='k')
ax.set_ylabel('y label here')
ax.set_xlabel('x label here')
ax.set_xticks(())
ax.set_yticks(())
ax.set_title(title)
ax.legend()
plt.show()
# ------------------------------------------
